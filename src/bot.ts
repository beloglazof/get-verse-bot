import { Bot, BotConfig, Middleware, Context } from 'grammy';
import { autoRetry } from '@grammyjs/auto-retry';
import { kv } from '@vercel/kv';
import { waitUntil } from '@vercel/functions';

import { ApiEnv, Book, Command, Env } from './types';
import {
  DAILY_VERSE_KEY,
  DAILY_VERSE_TEST_KEY,
  LIBRARY_BASE_URL,
  SANDWICH_KEY,
  SANDWICH_TEST_KEY,
} from './constants';
import {
  mainKeyboard,
  randomBGVerseMessageText,
  randomCCVerseMessageText,
  randomSBVerseMessageText,
  randomVerseMessageText,
} from './keyboard';
import { getRandomVerseMessage } from './get-verse-message';
import { BOOK_TITLE, VERSES_BY_BOOK } from './book-constants';

const { BOT_TOKEN: token = '', ENV: env } = process.env;
const dailyVerseKey = env === Env.Prod ? DAILY_VERSE_KEY : DAILY_VERSE_TEST_KEY;
const sandwichKey = env === Env.Prod ? SANDWICH_KEY : SANDWICH_TEST_KEY;
const botConfig: BotConfig<Context> = {
  client: { environment: env === Env.Prod ? ApiEnv.Prod : ApiEnv.Test },
};

export const bot = new Bot(token, botConfig);

bot.api.config.use(autoRetry());

const handleGetRandomVerse: (from?: Book) => Middleware<Context> =
  (from) => async (ctx) => {
    const message = getRandomVerseMessage(from);

    ctx.reply(message, {
      reply_markup: mainKeyboard,
      parse_mode: 'Markdown',
    });
  };

bot.hears(randomVerseMessageText, handleGetRandomVerse());
bot.hears(randomBGVerseMessageText, handleGetRandomVerse(Book.BG));
bot.hears(randomSBVerseMessageText, handleGetRandomVerse(Book.SB));
bot.hears(randomCCVerseMessageText, handleGetRandomVerse(Book.CC));

bot.command(Command.Start, (ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫`,
    {
      reply_markup: mainKeyboard,
    },
  );
});

bot.command(Command.Help, (ctx) => {
  ctx.reply(
    `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö.
  
–ï—Å–ª–∏ –±–æ—Ç –≤–µ–¥–µ—Ç —Å–µ–±—è —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ - @Beloglazof`,
    {
      reply_markup: mainKeyboard,
    },
  );
});

bot.command(Command.StartDaily, (ctx) => {
  try {
    waitUntil(kv.hset(dailyVerseKey, { [String(ctx.chatId)]: '' }));
    ctx.reply('–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –í–∞–º —Å—Ç–∏—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00 –ø–æ –ú–°–ö');
  } catch (error) {
    console.error(error);
  }
});

bot.command(Command.StopDaily, (ctx) => {
  try {
    waitUntil(kv.hdel(dailyVerseKey, String(ctx.chatId)));
    ctx.reply('–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤');
  } catch (error) {
    console.error(error);
  }
});

bot.command(Command.StartSandwich, (ctx) => {
  try {
    const initialData = JSON.stringify({
      [Book.SB]: 0,
      [Book.BG]: 0,
      [Book.CC]: 0,
    });

    waitUntil(
      kv.hset(`${sandwichKey}`, {
        [ctx.chatId]: initialData,
      }),
    );
    ctx.reply(
      '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ —Å—Ç–∏—Ö—É –∏–∑ –®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º, –ß–∞–π—Ç–∞–Ω—å—è-–ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç—ã –∏ –ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç—ã. –° —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∏—Ö–∞ –∏ –¥–æ –∫–æ–Ω—Ü–∞. –£—Ç—Ä–æ–º, –¥–Ω–µ–º –∏ –≤–µ—á–µ—Ä–æ–º.',
    );
  } catch (error) {
    console.error(error);
  }
});

bot.command(Command.StopSandwich, (ctx) => {
  try {
    waitUntil(kv.hdel(sandwichKey, String(ctx.chatId)));
    ctx.reply('–•–æ—Ä–æ—à–æ! –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ "—Å—ç–Ω–¥–≤–∏—á–∞"');
  } catch (error) {
    console.error(error);
  }
});

bot.callbackQuery(/bookmark/, async (ctx) => {
  try {
    await ctx.answerCallbackQuery();
    await ctx.editMessageReplyMarkup({ reply_markup: undefined });

    const [book, action] = ctx.callbackQuery.data.split('-');
    ctx.reply(
      `#${book} #${action}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É —Å [vedabase.io](${LIBRARY_BASE_URL}) –Ω–∞ —Å—Ç–∏—Ö –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å`,
      {
        parse_mode: 'Markdown',
        reply_markup: { force_reply: true },
      },
    );
  } catch (error) {
    console.error(error);
  }
});

bot.on('::url').filter(
  (ctx) =>
    Boolean(
      ctx.message?.reply_to_message?.text?.match(/^#(bg|sb|cc) #bookmark/),
    ),
  async (ctx) => {
    try {
      const sandwichData: Record<string, number> | null = await kv.hget(
        sandwichKey,
        String(ctx.chatId),
      );

      if (!sandwichData) {
        throw new Error(
          `–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ "—Å—ç–Ω–¥–≤–∏—á". 

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É —Å—Ç–∏—Ö–∏ –∏–∑ –ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç—ã, –®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º –∏ –®—Ä–∏ –ß–∞–π—Ç–∞–Ω—å—è-—á–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /${Command.StartSandwich}`,
        );
      }

      const url = new URL(ctx.entities('url')[0].text);
      const libraryUrl = new URL(LIBRARY_BASE_URL);

      if (url.hostname !== libraryUrl.hostname) {
        throw new Error(`–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ [vedabase.io](${LIBRARY_BASE_URL}).

–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–æ–º #bookmark`);
      }

      const bookmarkTarget = ctx.message?.reply_to_message?.text
        ?.match(/^#(bg|sb|cc)/)?.[0]
        .replace('#', '');

      const [_, __, urlBook, ...versePathParts] = url.pathname
        .split('/')
        .filter(Boolean);
      const book = bookmarkTarget as Book;

      if (bookmarkTarget !== urlBook) {
        throw new Error(`–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–µ –Ω–∞ —Ç—É –∫–Ω–∏–≥—É.

–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∫–Ω–∏–≥–∏ ${BOOK_TITLE[book]} –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–æ–º #bookmark`);
      }

      const versePath = versePathParts.join('.');
      const bookmarkedVerseIndex = VERSES_BY_BOOK[book].indexOf(versePath);
      const newSandwichData = JSON.stringify({
        ...sandwichData,
        [book]: bookmarkedVerseIndex + 1,
      });

      await kv.hset(sandwichKey, { [ctx.chatId]: newSandwichData });
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≤—Ç—Ä–∞ –ø—Ä–∏—à–ª—é —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∏—Ö');
    } catch (error) {
      if (error instanceof Error) {
        ctx.reply(error.message, { parse_mode: 'Markdown' });
      } else {
        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî');
      }
      console.error(error);
    }
  },
);
